<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shanli.jf.mapper.RechargeLogDao" >
  <resultMap id="BaseResultMap" type="com.shanli.jf.model.RechargeLog" >
    <id column="Id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="bank_card_id" property="bankCardId" jdbcType="INTEGER" />
    <result column="bank_card_num" property="bankCardNum" jdbcType="VARCHAR" />
    <result column="operation_amount" property="operationAmount" jdbcType="DECIMAL" />
    <result column="withdraw_fee" property="withdrawFee" jdbcType="DECIMAL" />
    <result column="operation_before" property="operationBefore" jdbcType="DECIMAL" />
    <result column="operation_after" property="operationAfter" jdbcType="DECIMAL" />
    <result column="remark" property="remark" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="add_ip" property="addIp" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
    <result column="bank_name" property="bankName" jdbcType="VARCHAR" />
    <result column="user_account_log_id" property="userAccountLogId" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="factory" property="factory" jdbcType="INTEGER" />
    <result column="order_num" property="orderNum" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <if test="fields == null" >
      Id, user_id, bank_card_id, bank_card_num, operation_amount, withdraw_fee, operation_before, 
      operation_after, remark, type, add_ip, create_time, modify_time, bank_name, user_account_log_id, 
      status, factory, order_num
    </if>
    <if test="fields != null" >
      ${fields}
    </if>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.shanli.jf.model.RechargeLogQuery" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from recharge_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="startRow != null" >
      limit #{startRow} , #{pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    Id,user_id,bank_card_id,bank_card_num,operation_amount,withdraw_fee,operation_before,operation_after,remark,type,add_ip,create_time,modify_time,bank_name,user_account_log_id,status,factory,order_num
    from recharge_log
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from recharge_log
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.shanli.jf.model.RechargeLogQuery" >
    delete from recharge_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.shanli.jf.model.RechargeLog" >
    insert into recharge_log (Id, user_id, bank_card_id, 
      bank_card_num, operation_amount, withdraw_fee, 
      operation_before, operation_after, remark, 
      type, add_ip, create_time, 
      modify_time, bank_name, user_account_log_id, 
      status, factory, order_num
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{bankCardId,jdbcType=INTEGER}, 
      #{bankCardNum,jdbcType=VARCHAR}, #{operationAmount,jdbcType=DECIMAL}, #{withdrawFee,jdbcType=DECIMAL}, 
      #{operationBefore,jdbcType=DECIMAL}, #{operationAfter,jdbcType=DECIMAL}, #{remark,jdbcType=VARCHAR}, 
      #{type,jdbcType=INTEGER}, #{addIp,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{modifyTime,jdbcType=TIMESTAMP}, #{bankName,jdbcType=VARCHAR}, #{userAccountLogId,jdbcType=INTEGER}, 
      #{status,jdbcType=INTEGER}, #{factory,jdbcType=INTEGER}, #{orderNum,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.shanli.jf.model.RechargeLog" >
    insert into recharge_log
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        Id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="bankCardId != null" >
        bank_card_id,
      </if>
      <if test="bankCardNum != null" >
        bank_card_num,
      </if>
      <if test="operationAmount != null" >
        operation_amount,
      </if>
      <if test="withdrawFee != null" >
        withdraw_fee,
      </if>
      <if test="operationBefore != null" >
        operation_before,
      </if>
      <if test="operationAfter != null" >
        operation_after,
      </if>
      <if test="remark != null" >
        remark,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="addIp != null" >
        add_ip,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
      <if test="bankName != null" >
        bank_name,
      </if>
      <if test="userAccountLogId != null" >
        user_account_log_id,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="factory != null" >
        factory,
      </if>
      <if test="orderNum != null" >
        order_num,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="bankCardId != null" >
        #{bankCardId,jdbcType=INTEGER},
      </if>
      <if test="bankCardNum != null" >
        #{bankCardNum,jdbcType=VARCHAR},
      </if>
      <if test="operationAmount != null" >
        #{operationAmount,jdbcType=DECIMAL},
      </if>
      <if test="withdrawFee != null" >
        #{withdrawFee,jdbcType=DECIMAL},
      </if>
      <if test="operationBefore != null" >
        #{operationBefore,jdbcType=DECIMAL},
      </if>
      <if test="operationAfter != null" >
        #{operationAfter,jdbcType=DECIMAL},
      </if>
      <if test="remark != null" >
        #{remark,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="addIp != null" >
        #{addIp,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bankName != null" >
        #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="userAccountLogId != null" >
        #{userAccountLogId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="factory != null" >
        #{factory,jdbcType=INTEGER},
      </if>
      <if test="orderNum != null" >
        #{orderNum,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.shanli.jf.model.RechargeLogQuery" resultType="java.lang.Integer" >
    select count(*) from recharge_log
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update recharge_log
    <set >
      <if test="record.id != null" >
        Id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.bankCardId != null" >
        bank_card_id = #{record.bankCardId,jdbcType=INTEGER},
      </if>
      <if test="record.bankCardNum != null" >
        bank_card_num = #{record.bankCardNum,jdbcType=VARCHAR},
      </if>
      <if test="record.operationAmount != null" >
        operation_amount = #{record.operationAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.withdrawFee != null" >
        withdraw_fee = #{record.withdrawFee,jdbcType=DECIMAL},
      </if>
      <if test="record.operationBefore != null" >
        operation_before = #{record.operationBefore,jdbcType=DECIMAL},
      </if>
      <if test="record.operationAfter != null" >
        operation_after = #{record.operationAfter,jdbcType=DECIMAL},
      </if>
      <if test="record.remark != null" >
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.addIp != null" >
        add_ip = #{record.addIp,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifyTime != null" >
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.bankName != null" >
        bank_name = #{record.bankName,jdbcType=VARCHAR},
      </if>
      <if test="record.userAccountLogId != null" >
        user_account_log_id = #{record.userAccountLogId,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.factory != null" >
        factory = #{record.factory,jdbcType=INTEGER},
      </if>
      <if test="record.orderNum != null" >
        order_num = #{record.orderNum,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update recharge_log
    set Id = #{record.id,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=INTEGER},
      bank_card_id = #{record.bankCardId,jdbcType=INTEGER},
      bank_card_num = #{record.bankCardNum,jdbcType=VARCHAR},
      operation_amount = #{record.operationAmount,jdbcType=DECIMAL},
      withdraw_fee = #{record.withdrawFee,jdbcType=DECIMAL},
      operation_before = #{record.operationBefore,jdbcType=DECIMAL},
      operation_after = #{record.operationAfter,jdbcType=DECIMAL},
      remark = #{record.remark,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      add_ip = #{record.addIp,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      bank_name = #{record.bankName,jdbcType=VARCHAR},
      user_account_log_id = #{record.userAccountLogId,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      factory = #{record.factory,jdbcType=INTEGER},
      order_num = #{record.orderNum,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.shanli.jf.model.RechargeLog" >
    update recharge_log
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="bankCardId != null" >
        bank_card_id = #{bankCardId,jdbcType=INTEGER},
      </if>
      <if test="bankCardNum != null" >
        bank_card_num = #{bankCardNum,jdbcType=VARCHAR},
      </if>
      <if test="operationAmount != null" >
        operation_amount = #{operationAmount,jdbcType=DECIMAL},
      </if>
      <if test="withdrawFee != null" >
        withdraw_fee = #{withdrawFee,jdbcType=DECIMAL},
      </if>
      <if test="operationBefore != null" >
        operation_before = #{operationBefore,jdbcType=DECIMAL},
      </if>
      <if test="operationAfter != null" >
        operation_after = #{operationAfter,jdbcType=DECIMAL},
      </if>
      <if test="remark != null" >
        remark = #{remark,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="addIp != null" >
        add_ip = #{addIp,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bankName != null" >
        bank_name = #{bankName,jdbcType=VARCHAR},
      </if>
      <if test="userAccountLogId != null" >
        user_account_log_id = #{userAccountLogId,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="factory != null" >
        factory = #{factory,jdbcType=INTEGER},
      </if>
      <if test="orderNum != null" >
        order_num = #{orderNum,jdbcType=VARCHAR},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shanli.jf.model.RechargeLog" >
    update recharge_log
    set user_id = #{userId,jdbcType=INTEGER},
      bank_card_id = #{bankCardId,jdbcType=INTEGER},
      bank_card_num = #{bankCardNum,jdbcType=VARCHAR},
      operation_amount = #{operationAmount,jdbcType=DECIMAL},
      withdraw_fee = #{withdrawFee,jdbcType=DECIMAL},
      operation_before = #{operationBefore,jdbcType=DECIMAL},
      operation_after = #{operationAfter,jdbcType=DECIMAL},
      remark = #{remark,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      add_ip = #{addIp,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      bank_name = #{bankName,jdbcType=VARCHAR},
      user_account_log_id = #{userAccountLogId,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      factory = #{factory,jdbcType=INTEGER},
      order_num = #{orderNum,jdbcType=VARCHAR}
    where Id = #{id,jdbcType=INTEGER}
  </update>
</mapper>