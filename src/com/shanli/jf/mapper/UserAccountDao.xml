<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.shanli.jf.mapper.UserAccountDao" >
  <resultMap id="BaseResultMap" type="com.shanli.jf.model.UserAccount" >
    <id column="Id" property="id" jdbcType="INTEGER" />
    <result column="free_cash" property="freeCash" jdbcType="DECIMAL" />
    <result column="version" property="version" jdbcType="INTEGER" />
    <result column="available_credit" property="availableCredit" jdbcType="DECIMAL" />
    <result column="frozen_amount" property="frozenAmount" jdbcType="DECIMAL" />
    <result column="modify_time" property="modifyTime" jdbcType="TIMESTAMP" />
    <result column="tend_amount" property="tendAmount" jdbcType="DECIMAL" />
    <result column="profit_yes" property="profitYes" jdbcType="DECIMAL" />
    <result column="profit_wait" property="profitWait" jdbcType="DECIMAL" />
    <result column="profit_all" property="profitAll" jdbcType="DECIMAL" />
    <result column="tend_return_amount" property="tendReturnAmount" jdbcType="DECIMAL" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="cash_wait" property="cashWait" jdbcType="DECIMAL" />
    <result column="total_amount" property="totalAmount" jdbcType="DECIMAL" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="demand_amount" property="demandAmount" jdbcType="DECIMAL" />
    <result column="interest_amount" property="interestAmount" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <if test="fields == null" >
      Id, free_cash, version, available_credit, frozen_amount, modify_time, tend_amount, 
      profit_yes, profit_wait, profit_all, tend_return_amount, user_id, cash_wait, total_amount, 
      status, demand_amount, interest_amount
    </if>
    <if test="fields != null" >
      ${fields}
    </if>
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.shanli.jf.model.UserAccountQuery" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="startRow != null" >
      limit #{startRow} , #{pageSize}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    Id,free_cash,version,available_credit,frozen_amount,modify_time,tend_amount,profit_yes,profit_wait,profit_all,tend_return_amount,user_id,cash_wait,total_amount,status,demand_amount,interest_amount
    from user_account
    where Id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from user_account
    where Id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.shanli.jf.model.UserAccountQuery" >
    delete from user_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.shanli.jf.model.UserAccount" >
    insert into user_account (Id, free_cash, version, 
      available_credit, frozen_amount, modify_time, 
      tend_amount, profit_yes, profit_wait, 
      profit_all, tend_return_amount, user_id, 
      cash_wait, total_amount, status, 
      demand_amount, interest_amount)
    values (#{id,jdbcType=INTEGER}, #{freeCash,jdbcType=DECIMAL}, #{version,jdbcType=INTEGER}, 
      #{availableCredit,jdbcType=DECIMAL}, #{frozenAmount,jdbcType=DECIMAL}, #{modifyTime,jdbcType=TIMESTAMP}, 
      #{tendAmount,jdbcType=DECIMAL}, #{profitYes,jdbcType=DECIMAL}, #{profitWait,jdbcType=DECIMAL}, 
      #{profitAll,jdbcType=DECIMAL}, #{tendReturnAmount,jdbcType=DECIMAL}, #{userId,jdbcType=INTEGER}, 
      #{cashWait,jdbcType=DECIMAL}, #{totalAmount,jdbcType=DECIMAL}, #{status,jdbcType=INTEGER}, 
      #{demandAmount,jdbcType=DECIMAL}, #{interestAmount,jdbcType=DECIMAL})
  </insert>
  <insert id="insertSelective" parameterType="com.shanli.jf.model.UserAccount" >
    insert into user_account
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        Id,
      </if>
      <if test="freeCash != null" >
        free_cash,
      </if>
      <if test="version != null" >
        version,
      </if>
      <if test="availableCredit != null" >
        available_credit,
      </if>
      <if test="frozenAmount != null" >
        frozen_amount,
      </if>
      <if test="modifyTime != null" >
        modify_time,
      </if>
      <if test="tendAmount != null" >
        tend_amount,
      </if>
      <if test="profitYes != null" >
        profit_yes,
      </if>
      <if test="profitWait != null" >
        profit_wait,
      </if>
      <if test="profitAll != null" >
        profit_all,
      </if>
      <if test="tendReturnAmount != null" >
        tend_return_amount,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="cashWait != null" >
        cash_wait,
      </if>
      <if test="totalAmount != null" >
        total_amount,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="demandAmount != null" >
        demand_amount,
      </if>
      <if test="interestAmount != null" >
        interest_amount,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="freeCash != null" >
        #{freeCash,jdbcType=DECIMAL},
      </if>
      <if test="version != null" >
        #{version,jdbcType=INTEGER},
      </if>
      <if test="availableCredit != null" >
        #{availableCredit,jdbcType=DECIMAL},
      </if>
      <if test="frozenAmount != null" >
        #{frozenAmount,jdbcType=DECIMAL},
      </if>
      <if test="modifyTime != null" >
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="tendAmount != null" >
        #{tendAmount,jdbcType=DECIMAL},
      </if>
      <if test="profitYes != null" >
        #{profitYes,jdbcType=DECIMAL},
      </if>
      <if test="profitWait != null" >
        #{profitWait,jdbcType=DECIMAL},
      </if>
      <if test="profitAll != null" >
        #{profitAll,jdbcType=DECIMAL},
      </if>
      <if test="tendReturnAmount != null" >
        #{tendReturnAmount,jdbcType=DECIMAL},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="cashWait != null" >
        #{cashWait,jdbcType=DECIMAL},
      </if>
      <if test="totalAmount != null" >
        #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="demandAmount != null" >
        #{demandAmount,jdbcType=DECIMAL},
      </if>
      <if test="interestAmount != null" >
        #{interestAmount,jdbcType=DECIMAL},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.shanli.jf.model.UserAccountQuery" resultType="java.lang.Integer" >
    select count(*) from user_account
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update user_account
    <set >
      <if test="record.id != null" >
        Id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.freeCash != null" >
        free_cash = #{record.freeCash,jdbcType=DECIMAL},
      </if>
      <if test="record.version != null" >
        version = #{record.version,jdbcType=INTEGER},
      </if>
      <if test="record.availableCredit != null" >
        available_credit = #{record.availableCredit,jdbcType=DECIMAL},
      </if>
      <if test="record.frozenAmount != null" >
        frozen_amount = #{record.frozenAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.modifyTime != null" >
        modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.tendAmount != null" >
        tend_amount = #{record.tendAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.profitYes != null" >
        profit_yes = #{record.profitYes,jdbcType=DECIMAL},
      </if>
      <if test="record.profitWait != null" >
        profit_wait = #{record.profitWait,jdbcType=DECIMAL},
      </if>
      <if test="record.profitAll != null" >
        profit_all = #{record.profitAll,jdbcType=DECIMAL},
      </if>
      <if test="record.tendReturnAmount != null" >
        tend_return_amount = #{record.tendReturnAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.userId != null" >
        user_id = #{record.userId,jdbcType=INTEGER},
      </if>
      <if test="record.cashWait != null" >
        cash_wait = #{record.cashWait,jdbcType=DECIMAL},
      </if>
      <if test="record.totalAmount != null" >
        total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.demandAmount != null" >
        demand_amount = #{record.demandAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.interestAmount != null" >
        interest_amount = #{record.interestAmount,jdbcType=DECIMAL},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update user_account
    set Id = #{record.id,jdbcType=INTEGER},
      free_cash = #{record.freeCash,jdbcType=DECIMAL},
      version = #{record.version,jdbcType=INTEGER},
      available_credit = #{record.availableCredit,jdbcType=DECIMAL},
      frozen_amount = #{record.frozenAmount,jdbcType=DECIMAL},
      modify_time = #{record.modifyTime,jdbcType=TIMESTAMP},
      tend_amount = #{record.tendAmount,jdbcType=DECIMAL},
      profit_yes = #{record.profitYes,jdbcType=DECIMAL},
      profit_wait = #{record.profitWait,jdbcType=DECIMAL},
      profit_all = #{record.profitAll,jdbcType=DECIMAL},
      tend_return_amount = #{record.tendReturnAmount,jdbcType=DECIMAL},
      user_id = #{record.userId,jdbcType=INTEGER},
      cash_wait = #{record.cashWait,jdbcType=DECIMAL},
      total_amount = #{record.totalAmount,jdbcType=DECIMAL},
      status = #{record.status,jdbcType=INTEGER},
      demand_amount = #{record.demandAmount,jdbcType=DECIMAL},
      interest_amount = #{record.interestAmount,jdbcType=DECIMAL}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.shanli.jf.model.UserAccount" >
    update user_account
    <set >
      <if test="freeCash != null" >
        free_cash = #{freeCash,jdbcType=DECIMAL},
      </if>
      <if test="version != null" >
        version = #{version,jdbcType=INTEGER},
      </if>
      <if test="availableCredit != null" >
        available_credit = #{availableCredit,jdbcType=DECIMAL},
      </if>
      <if test="frozenAmount != null" >
        frozen_amount = #{frozenAmount,jdbcType=DECIMAL},
      </if>
      <if test="modifyTime != null" >
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="tendAmount != null" >
        tend_amount = #{tendAmount,jdbcType=DECIMAL},
      </if>
      <if test="profitYes != null" >
        profit_yes = #{profitYes,jdbcType=DECIMAL},
      </if>
      <if test="profitWait != null" >
        profit_wait = #{profitWait,jdbcType=DECIMAL},
      </if>
      <if test="profitAll != null" >
        profit_all = #{profitAll,jdbcType=DECIMAL},
      </if>
      <if test="tendReturnAmount != null" >
        tend_return_amount = #{tendReturnAmount,jdbcType=DECIMAL},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="cashWait != null" >
        cash_wait = #{cashWait,jdbcType=DECIMAL},
      </if>
      <if test="totalAmount != null" >
        total_amount = #{totalAmount,jdbcType=DECIMAL},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="demandAmount != null" >
        demand_amount = #{demandAmount,jdbcType=DECIMAL},
      </if>
      <if test="interestAmount != null" >
        interest_amount = #{interestAmount,jdbcType=DECIMAL},
      </if>
    </set>
    where Id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.shanli.jf.model.UserAccount" >
    update user_account
    set free_cash = #{freeCash,jdbcType=DECIMAL},
      version = #{version,jdbcType=INTEGER},
      available_credit = #{availableCredit,jdbcType=DECIMAL},
      frozen_amount = #{frozenAmount,jdbcType=DECIMAL},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      tend_amount = #{tendAmount,jdbcType=DECIMAL},
      profit_yes = #{profitYes,jdbcType=DECIMAL},
      profit_wait = #{profitWait,jdbcType=DECIMAL},
      profit_all = #{profitAll,jdbcType=DECIMAL},
      tend_return_amount = #{tendReturnAmount,jdbcType=DECIMAL},
      user_id = #{userId,jdbcType=INTEGER},
      cash_wait = #{cashWait,jdbcType=DECIMAL},
      total_amount = #{totalAmount,jdbcType=DECIMAL},
      status = #{status,jdbcType=INTEGER},
      demand_amount = #{demandAmount,jdbcType=DECIMAL},
      interest_amount = #{interestAmount,jdbcType=DECIMAL}
    where Id = #{id,jdbcType=INTEGER}
  </update>
</mapper>